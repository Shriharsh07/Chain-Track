// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/block/{id}": {
            "get": {
                "description": "Retrieve a single block by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Get Block by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Block ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BlockResponse"
                        }
                    },
                    "404": {
                        "description": "Block not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Tamper the data of a transaction within the specified block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Tamper Block Data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Block ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block data tampered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Block or transaction not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to tamper transaction",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blocks": {
            "get": {
                "description": "Retrieve all blocks from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blocks"
                ],
                "summary": "Get All Blocks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.BlockResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve blocks",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mine": {
            "post": {
                "description": "Takes all unmined transactions and creates a new block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Block Mining"
                ],
                "summary": "Mines a new block",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.BlockResponse"
                        }
                    },
                    "400": {
                        "description": "No transactions to mine",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to mine block",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transaction": {
            "post": {
                "description": "Creates a new transaction with sender, receiver, and amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Create a new transaction",
                "parameters": [
                    {
                        "description": "Transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Validation failed or invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create transaction",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "Retrieve all transactions from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get All Transactions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve transactions",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transactions/{blockId}": {
            "get": {
                "description": "Retrieve all transactions for a specific block by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get Transactions by Block ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Block ID",
                        "name": "blockId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve transactions",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/validate": {
            "get": {
                "description": "Validate the blockchain by checking the hashes and proof of work of each block",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blockchain"
                ],
                "summary": "Validate Blockchain Integrity",
                "responses": {
                    "200": {
                        "description": "Blockchain is valid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Blockchain is invalid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to fetch blocks",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.BlockResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "integer"
                },
                "previous_hash": {
                    "type": "string"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Transaction"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "required": [
                "amount",
                "receiver",
                "sender"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0.01
                },
                "block_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isMined": {
                    "type": "boolean"
                },
                "receiver": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
